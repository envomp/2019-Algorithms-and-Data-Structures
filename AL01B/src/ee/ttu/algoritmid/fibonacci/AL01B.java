package ee.ttu.algoritmid.fibonacci;

import java.math.BigDecimal;
import java.math.BigInteger;
import java.math.RoundingMode;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.List;

public class AL01B {

    /**
     * Estimate or find the exact time required to compute the n-th Fibonacci number.
     *
     * @param n The n-th number to compute.
     * @return The time estimate or exact time in YEARS.
     */
    public String timeToComputeRecursiveFibonacci(int n) {
        // BigDecimal processorSpeed = BigDecimal.valueOf(0.0000001);
        // BigDecimal secondsInAYear = BigDecimal.valueOf(31556926);
        // for (int i = 0; i < 200; i++) {
        //     BigDecimal branches = iterativeF(i + 1);
        //     answers.add(branches.multiply(processorSpeed).divide(secondsInAYear, 10, RoundingMode.HALF_UP).toPlainString());
        // }
        // System.out.println(answers);

        List<Double> answers = new ArrayList<Double>(Arrays.asList(0.0000000000, 0.0000000000, 0.0000000000, 0.0000000000, 0.0000000000, 0.0000000000, 0.0000000000, 0.0000000000, 0.0000000000, 0.0000000000, 0.0000000000, 0.0000000000, 0.0000000000, 0.0000000000, 0.0000000000, 0.0000000000, 0.0000000000, 0.0000000000, 0.0000000000, 0.0000000000, 0.0000000001, 0.0000000001, 0.0000000002, 0.0000000003, 0.0000000004, 0.0000000007, 0.0000000012, 0.0000000019, 0.0000000030, 0.0000000049, 0.0000000079, 0.0000000128, 0.0000000207, 0.0000000335, 0.0000000542, 0.0000000877, 0.0000001419, 0.0000002297, 0.0000003716, 0.0000006013, 0.0000009729, 0.0000015741, 0.0000025470, 0.0000041211, 0.0000066680, 0.0000107891, 0.0000174571, 0.0000282462, 0.0000457034, 0.0000739496, 0.0001196530, 0.0001936026, 0.0003132556, 0.0005068582, 0.0008201138, 0.0013269720, 0.0021470859, 0.0034740579, 0.0056211438, 0.0090952017, 0.0147163455, 0.0238115473, 0.0385278928, 0.0623394400, 0.1008673328, 0.1632067728, 0.2640741057, 0.4272808785, 0.6913549841, 1.1186358626, 1.8099908468, 2.9286267094, 4.7386175562, 7.6672442656, 12.4058618219, 20.0731060875, 32.4789679094, 52.5520739969, 85.0310419062, 137.5831159031, 222.6141578093, 360.1972737124, 582.8114315217, 943.0087052340, 1525.8201367557, 2468.8288419898, 3994.6489787455, 6463.4778207353, 10458.1267994807, 16921.6046202160, 27379.7314196967, 44301.3360399127, 71681.0674596095, 115982.4034995222, 187663.4709591317, 303645.8744586539, 491309.3454177855, 794955.2198764394, 1286264.5652942249, 2081219.7851706643, 3367484.3504648892, 5448704.1356355535, 8816188.4861004427, 14264892.6217359962, 23081081.1078364390, 37345973.7295724352, 60427054.8374088742, 97773028.5669813094, 158200083.4043901836, 255973111.9713714930, 414173195.3757616766, 670146307.3471331696, 1084319502.7228948461, 1754465810.0700280157, 2838785312.7929228619, 4593251122.8629508776, 7432036435.6558737394, 12025287558.5188246170, 19457323994.1746983565, 31482611552.6935229735, 50939935546.8682213300, 82422547099.5617443035, 133362482646.4299656334, 215785029745.9917099369, 349147512392.4216755704, 564932542138.4133855073, 914080054530.8350610776, 1479012596669.2484465849, 2393092651200.0835076625, 3872105247869.3319542475, 6265197899069.4154619100, 10137303146938.7474161574, 16402501046008.1628780674, 26539804192946.9102942249, 42942305238955.0731722923, 69482109431901.9834665172, 112424414670857.0566388095, 181906524102759.0401053267, 294330938773616.0967441362, 476237462876375.1368494629, 770568401649991.2335935992, 1246805864526366.3704430621, 2017374266176357.6040366612, 3264180130702723.9744797233, 5281554396879081.5785163846, 8545734527581805.5529961079, 13827288924460887.1315124925, 22373023452042692.6845086004, 36200312376503579.8160210928, 58573335828546272.5005296932, 94773648205049852.3165507860, 153346984033596124.8170804791, 248120632238645977.1336312651, 401467616272242101.9507117442, 649588248510888079.0843430093, 1051055864783130181.0350547535, 1700644113294018260.1193977629, 2751699978077148441.1544525164, 4452344091371166701.2738502793, 7204044069448315142.4283027957, 11656388160819481843.7021530750, 18860432230267796986.1304558707, 30516820391087278829.8326089457, 49377252621355075815.9630648165, 79894073012442354645.7956737622, 129271325633797430461.7587385787, 209165398646239785107.5544123409, 338436724280037215569.3131509195, 547602122926277000676.8675632604, 886038847206314216246.1807141800, 1433640970132591216923.0482774404, 2319679817338905433169.2289916204, 3753320787471496650092.2772690608, 6073000604810402083261.5062606811, 9826321392281898733353.7835297419, 15899321997092300816615.2897904231, 25725643389374199549969.0733201650, 41624965386466500366584.3631105881, 67350608775840699916553.4364307530, 108975574162307200283137.7995413411, 176326182938147900199691.2359720941, 285301757100455100482829.0355134352, 461627940038603000682520.2714855293, 746929697139058101165349.3069989645, 1208557637177661101847869.5784844939, 1955487334316719203013218.8854834584, 3164044971494380304861088.4639679523, 5119532305811099507874307.3494514107, 8283577277305479812735395.8134193630, 13403109583116579320609703.1628707738, 21686686860422059133345098.9762901368, 35089796443538638453954802.1391609106, 56776483303960697587299901.1154510474, 91866279747499336041254703.2546119580, 148642763051460033628554604.3700630054, 240509042798959369669809307.6246749635, 389151805850419403298363911.9947379689, 629660848649378772968173219.6194129324, 1018812654499798176266537131.6141509012, 1648473503149176949234710351.2335638336, 2667286157648975125501247482.8477147349));

        return String.valueOf(answers.get(n));
    }

    private BigDecimal iterativeF(int n) {
        if (n < 3) {
            return BigDecimal.valueOf(n);
        }
        BigDecimal temp = BigDecimal.valueOf(0);
        BigDecimal x = BigDecimal.valueOf(1);
        BigDecimal y = BigDecimal.valueOf(1);
        for (int i = 0; i < n - 2; i++) {
            temp = x;
            x = y.add(x);
            y = temp;
        }
        return x.multiply(BigDecimal.valueOf(3)).subtract(BigDecimal.valueOf(2));
    }

    /**
     * Compute the Fibonacci sequence number recursively.
     * (You need this in the timeToComputeRecursiveFibonacci(int n) function!)
     *
     * @param n The n-th number to compute.
     * @return The n-th Fibonacci number as a string.
     */
    public BigInteger recursiveF(int n) {
        if (n <= 1)
            return BigInteger.valueOf(n);
        return recursiveF(n - 1).add(recursiveF(n - 2));
    }

    public static void main(String[] args) {
        AL01B test = new AL01B();
        System.out.println(test.timeToComputeRecursiveFibonacci(50));
        System.out.println(test.timeToComputeRecursiveFibonacci(69));
    }

}
